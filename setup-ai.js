#!/usr/bin/env node

/**
 * PXL Chiptune Studio - AI Setup Script
 *
 * This script helps you set up AI integration with OpenRouter + Gemini Flash 2.5
 * Run this script to configure your API keys and enable real AI generation.
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function ask(question) {
  return new Promise((resolve) => {
    rl.question(question, resolve);
  });
}

async function setupAI() {
  console.log('üöÄ PXL Chiptune Studio - AI Setup');
  console.log('=================================\n');

  console.log('This script will help you configure AI integration using OpenRouter.');
  console.log('OpenRouter provides access to Google Gemini Flash 2.5 and other models.\n');

  console.log('üìã Steps:');
  console.log('1. Go to https://openrouter.ai/keys');
  console.log('2. Sign up for an account (if you don\'t have one)');
  console.log('3. Create an API key');
  console.log('4. Copy the API key\n');

  const apiKey = await ask('üîë Enter your OpenRouter API key: ');

  if (!apiKey || apiKey.trim() === '') {
    console.log('‚ùå No API key provided. Setup cancelled.');
    rl.close();
    return;
  }

  // Create .env.local content
  const envContent = `# AI Service Configuration for OpenRouter + Gemini Flash 2.5
# This file was generated by setup-ai.js
# DO NOT commit this file to version control

# OpenRouter Configuration (Unified API for multiple models)
OPENROUTER_API_KEY=${apiKey.trim()}
OPENROUTER_BASE_URL=https://openrouter.ai/api/v1
OPENROUTER_MODEL=google/gemini-flash-1.5  # Gemini Flash 2.5

# AI Service Settings
AI_PROVIDER=openrouter  # Updated to use OpenRouter
AI_TEMPERATURE=0.7
AI_MAX_TOKENS=4000
AI_TIMEOUT=30000

# Fallback settings
DEFAULT_AI_PROVIDER=mock
`;

  // Write to .env.local
  const envPath = path.join(__dirname, '.env.local');

  try {
    fs.writeFileSync(envPath, envContent, 'utf8');
    console.log('‚úÖ AI configuration saved to .env.local');
    console.log('‚úÖ AI Provider: OpenRouter with Google Gemini Flash 2.5');
    console.log('\nüéµ Your AI Helper is now ready to use!');
    console.log('Restart your development server to load the new configuration.');
    console.log('\nüí° Try prompts like:');
    console.log('   - "Create a funky bassline with some syncopated hi-hats"');
    console.log('   - "Add atmospheric pads that evolve over time"');
    console.log('   - "Generate chord progressions in the current key"');
  } catch (error) {
    console.error('‚ùå Failed to write configuration file:', error.message);
    console.log('\nüîß Manual Setup:');
    console.log('Create a file named .env.local in your project root with this content:');
    console.log(envContent);
  }

  rl.close();
}

setupAI().catch(console.error);
